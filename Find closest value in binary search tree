# Find closest value in binary search tree
# Average : O(Log(n)) time | O(Log(n)) space
# Worst: O(n) time | O(n) space

# def findClosesValueInBst(tree, target):
#     return findClosesValueInBstHelper(tree, target, float("inf"))
#
# def findClosesValueInBstHelper(tree, target, closest):
#    if tree is None:
#        return closest
#    if abs(target-closest) > abs(target - tree.value):
#        closest = tree.value
#    if target < tree.value:
#        return findClosesValueInBstHelper(tree.left, target, closest)
#    elif target > tree.value:
#        return findClosesValueInBstHelper(tree.right, target, closest)
#    else:
#        return closest


def findClosesValueInBst(tree, target):
    return findClosesValueInBstHelper(tree, target, float("inf"))


def findClosesValueInBstHelper(tree, target, closest):
    currentNode = tree
    while currentNode is not None:
        if abs(target - closest) > abs(target - currentNode.value):
            closest = currentNode.value
        if target < currentNode.value:
            currentNode = currentNode.left
        elif target > currentNode.value:
            return findClosesValueInBstHelper(tree.right, target, closest)
        else:
            break
    
    return closest
